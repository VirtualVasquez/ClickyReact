{"version":3,"sources":["components/Header/Header.js","components/Banner/Banner.js","components/Footer/Footer.js","components/Game/Game.js","components/ClickItem/ClickItem.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","message","indexOf","curScore","topScore","Banner","id","Component","Footer","Game","children","ClickItem","undefined","onClick","selectCharacter","reploid","alt","src","image","App","state","characters","unselectedCharacters","shuffleArray","array","i","length","j","Math","floor","random","_ref","_this","find","item","setState","newReploids","filter","_this2","this","components_Game_Game","components_Header_Header","components_Banner_Banner","map","character","components_ClickItem_ClickItem","key","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf74f106.chunk.js","sourcesContent":["import React from \"react\"\r\nimport './Header.css'\r\n\r\nconst Header = props => (\r\n    <header>\r\n    <h3>Clicky Game X</h3>\r\n    <h3 className={props.message.indexOf('incorrectly') !== -1 ? \"desc-incorrect\" : props.message.indexOf('correctly') !== -1 ? \"desc-correct\" : \"desc-normal\"} >{props.message}</h3>\r\n    <h3>Score: {props.curScore} | Top Score: {props.topScore}</h3>\r\n    </header>\r\n)\r\n\r\nexport default Header","import React, { Component } from \"react\"\r\nimport './Banner.css'\r\n\r\nclass Banner extends Component {\r\n    render() {\r\n        return(\r\n            <div id=\"banner\">\r\n            <h1>Clicky Game X</h1>\r\n            <h3>Click on an image to earn points, but don't click on any more than once!</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Banner","import React from \"react\"\r\nimport './Footer.css'\r\n\r\nconst Footer = props => (\r\n            <footer>\r\n                <p>Clicky Game X</p>\r\n            </footer>\r\n)\r\n\r\nexport default Footer","import React from \"react\"\r\nimport './Game.css'\r\n\r\nconst Game = props => <div className=\"game\">{props.children}</div>;\r\n\r\n\r\nexport default Game","import React from \"react\"\r\nimport './ClickItem.css'\r\n\r\nconst ClickItem = props => (\r\n\t<div className=\"clickItem\">\r\n\t\t<div className=\"img-container\">\r\n\t\t<img className={props.curScore === 0 ? \"style_prevu_kit_ex\" : undefined} onClick={() => props.selectCharacter(props.reploid)} alt={props.reploid} src={props.image} />\r\n\t\t</div>\r\n\t</div>\r\n)\r\n\r\nexport default ClickItem","import React, { Component } from \"react\";\r\nimport characters from './characters.json';\r\nimport Header from './components/Header/Header.js';\r\nimport Banner from './components/Banner/Banner.js';\r\nimport Footer from './components/Footer/Footer.js';\r\nimport Game from './components/Game/Game.js';\r\nimport ClickItem from './components/ClickItem/ClickItem.js';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    message: \"Click an image to begin!\",\r\n    topScore: 0,\r\n    curScore: 0,\r\n    characters: characters,\r\n    unselectedCharacters: characters\r\n  }\r\n\r\n  shuffleArray = array => {\r\n    for (let i = array.length - 1; i > 0 ; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]]; \r\n    }\r\n  }\r\n\r\n  //upon clicking a character\r\n  selectCharacter = reploid => {\r\n    const findCharacter = this.state.unselectedCharacters.find(item => item.reploid === reploid)\r\n    \r\n    if(findCharacter === undefined) {\r\n      //failure to select a new reploid, resetting for new round\r\n      this.setState({\r\n        message: \"You guessed incorrectly!\",\r\n        topScore: (this.state.curScore > this.state.topScore) ? this.state.curScore : this.state.topScore,\r\n        curScore: 0,\r\n        characters: characters,\r\n        unselectedCharacters: characters\r\n      });\r\n    }\r\n    else {\r\n      //successfullly picked a new character\r\n      const newReploids = this.state.unselectedCharacters.filter(item => item.reploid !== reploid);\r\n\r\n      this.setState({\r\n        message: \"You guessed correctly!\", \r\n        curScore: this.state.curScore + 1,\r\n        characters: characters,\r\n        unselectedCharacters: newReploids\r\n      });\r\n    }\r\n    this.shuffleArray(characters);\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Game>\r\n        <Header\r\n          message={this.state.message}\r\n          curScore={this.state.curScore}\r\n          topScore={this.state.topScore}\r\n        />\r\n        <Banner />\r\n        <div id=\"clickHolder\">\r\n        {\r\n          this.state.characters.map(character => (\r\n            <ClickItem\r\n              key={character.reploid}\r\n              reploid={character.reploid}\r\n              image={character.image}\r\n              selectCharacter={this.selectCharacter}\r\n              curScore={this.state.curScore}\r\n            />\r\n          ))\r\n        }\r\n        </div>\r\n        <Footer />\r\n      </Game>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}